clj00001	"query <br>
<br>
·· [{:all-lists [:list/id :list/name]}]"	"response <br>
<br>
·· {:all-lists <br>
···· [{:list/id 1 :list/name ""Personal""} <br>
····  {:list/id 2 :list/name ""Work""}]}"
clj00002	"join query <br>
<br>
·· [{:all-lists [{:list/items [:todo/label]}]}]"	"response <br>
<br>
·· {:all-lists <br>
··  [{:list/id 1 <br>
······  :list/name ""Personal""
······  :list/items [{:todo/label ""Buy Milk""
··················          :todo/label ""Cook Dinner""
··················          :todo/label ""Mail Letter""}]}"
clj00003	"Ident query <br>
<br>
·· {[:list/id 1] <br>
··  {:list/name Clojure}}"	"response <br>
<br>
·· {[:list/id 1] <br>
··  {:list/name Clojure}}"
clj00004	Supply driven architecture	"backend servisleri belirtir <br>
istemci tek bir alan bile eklemek istese, backend yazılımcısına talepte bulunur <br>
"
clj00005	Supply driven architecture problemleri neler?	"Gelecekteki istemcilerin ihtiyaçlarını tahmin edemeyiz <br>
Herkesin aynı anda versiyon yükseltmesini sağlayamazsın (senkronizasyon çok zordur) <br>
Latency really matters (n requests)"
clj00006	Demand driven architecture	"Represent client demand as data <br>
istemci neye ihtiyacı olduğunu belirtir <br>
- hangi bilgiye <br>
- bu bilginin şekline (shape)"
clj00007	EQL vs. SQL	"SQL: bir string  <br>
EQL: data structure. <br>
semantik çok daha zengin"
clj00008	User interfaces in demand driven architecture	"UI are trees <br>
We can annotate UI components with query fragments <br>
ContactListView: <br>
·· [:person/first-name {person/address ...}]"
clj00009	REST ile çözülemeyen temel problem	client-server senkronizasyonu <br>
clj00010	Datomic Pull Syntax simplified	"it is recursive select-keys <br>
(select-keys {:a 1 :b 2} [:a :c]) <br>
;;=&gt; {:a 1}"
clj00011	Write a pathom resolver to get youtube video data	"(defresolver `youtube-video-by-id <br>
·· {::pc/input  #{:youtube.video/id} <br>
··  ::pc/output [:youtube.video/id <br>
················ :youtube.video/title]} <br>
·· (fn [env {:keys [youtube.video/id]}] <br>
···· (some-&gt; (youtube env (str ""/videos?part=snippet&id="" id)) <br>
············ :items first <br>
············ (adapt-video)))) <br>
(defn youtube [{:keys [youtube.api/token]} path] <br>
·· (-&gt; (http/get (str ""https://www.googleapis.com/youtube/v3"" path ""&key="" token) <br>
······ {:as :auto}) <br>
···· :body))"
clj00012	Diffs bw GraphQL and EQL	"Enums <br>
Variables <br>
Fragment (alt sorgu cümleleri) <br>
Directives (if vb. mantık kuralları) <br>
Types"
clj00013	EQL: Enum çözümü?	"use specs <br>
(s/def :s/episodes #{hope empire jedi})"
clj00014	EQL: Çözüm? Variables	"plain clojure symbols <br>
(defn a-query [episode] <br>
·· [{(:movie/hero {:movie/episode episode})}])"
clj00015	EQL: Çözüm? Fragment (alt sorgu cümleleri)	"(def character-fields <br>
·· [:character/name <br>
··  :character/appears-in]) <br>
[{(:movie/hero {:movie/episode}) <br>
·· character-fields}]  ;; uses a global variable"
clj00016	App (in fulcro)	"Fulcro application  <br>
produced by `app/fulcro-app`"
clj00017	Client DB (in fulcro)	"map of maps <br>
entity name -&gt; id -&gt; properties <br>
id property = entity name <br>
{:person/id  {123 {:person/id 123, :person/fname ""Jo"", :person/address [:address/id 3]}}}"
clj00018	UI Component (in fulcro)	"React component with meta data (query, ident) <br>
stateful = has a query <br>
stateless = otherwise = UI-only"
clj00019	Data entity (in fulcro)	a part of frontend data model with an identity <br>
clj00020	EQL server (in fulcro)	pathom implementation in backend <br>
clj00021	Ident (in fulcro)	"of a data entity: identify of a data entity <br>
ID property name and a value <br>
of a component: a function that returns an ident <br>
"
clj00022	Mutation (in fulcro)	"components submit a mutation that describes desired change <br>
local or remote <br>
for fulcro: request to load data from backend is also a mutation (local)"
clj00023	Normalization of data (in fulcro)	entities do not include other entities but only their idents <br>
clj00024	Query (in fulcro)	stateful components declare what data they need using an EQL query (query fragment) <br>
clj00025	Resolver  (in fulcro)	"takes 0..1 input, optional parameters <br>
outputs a tree of data <br>
ex: ::pc/output [{:all-blogs [:blog/id :blog/title :blog/content]}]  <br>
·· return {:all-blogs [{:blog/id 1, ..}, ..]}.  <br>
·· any query that asks for :all-blogs can be ""parsed"" and answered. <br>
"
clj00026	Root component (in fulcro)	top component of UI, `Root` <br>
clj00027	Transaction subsystem (in fulcro)	"an async queue <br>
components submit mutations to transaction subsystem for execution with `transact!`"
clj00028	; Destructuring qualified keywords ~/projects/study/clj/clojure.md#r=g12377&gt;	"(def props {:car/make ""Škoda"", :ui/selected? false}) <br>
<br>
;; 1. :&lt;ns&gt;/keys [..] <br>
(let [{:car/keys [make], :ui/keys [selected?]} props] [make selected?]) <br>
<br>
;; 2. :keys [&lt;ns1&gt;/key1, &lt;ns2&gt;/key2, ...] <br>
(let [{:keys [car/make ui/selected?]} props] [make selected?]) <br>
<br>
;; 3. &lt;symbol&gt; &lt;qualified keyword&gt; <br>
(let [{make :car/make, selected? :ui/selected?]} props] [make selected?])"
clj00029	; Destructuring qualified keywords of alias namespaces  ~/projects/study/clj/clojure.md#r=g12378>	"; Alias ile qualify edilen keyword iki tane `:` gerektirir: `::<ns_alias>/kwd` <br>
; Eğer alias ile qualify etmeden çift `:` kullanırsan, current ns ile genişletilir: `::kwd` = `:&lt;current_ns&gt;/kwd` <br>
(ns myns (:require [my.domain.car :as car])) <br>
(def props {::car/make ""Škoda"", :my.domain.car/year 2020, ::sold? true}) <br>
(let [{::car/keys [make year], ::keys [sold?], sold2? :myns/sold?} props] <br>
·· (println make year sold? sold2?)) <br>
; OUT&gt; Škoda 2020 true true"
clj00030	defsc	define stateful component (React class-based component) <br>
clj00031	Parts of Fulcro stateful component	"defsc = React class-based component = produces a JS class <br>
·· (defsc Person [&lt;arguments&gt;] <br>
···· {&lt;meta data&gt;} <br>
···· (&lt;body&gt;)) <br>
factory = creates React elements <br>
·· (def ui-person (comp/factory Person))"
clj00032	Parts of defsc (React class-based component)	"arguments: `this` and `props` <br>
meta data: `:query` and `:ident` <br>
body: `render` method of the React component = produces DOM elements <br>
Note: props and query mirror each other"
clj00033	Example Fulcro component: Person with properties id, fname, email, address	"(defsc Person <br>
·· [this {:person/keys [fname email address] :as props}] ;  <br>
·· {:query [:person/id :person/fname :person/email       ;  <br>
··········  {:person/address (comp/get-query Address)}] <br>
··  :ident (fn [] [:person/id (:person/id props)])}      ;  <br>
·· (div                                                  ;  <br>
···· (p ""Name: "" fname "", email: "" email) <br>
···· (ui-address address))) <br>
(def ui-person (comp/factory Person))"
clj00034	props	map of data passed in by the parent component <br>
clj00035	query part of component:	"what props the component needs, including the needs of its child components <br>
(defsc Person <br>
·· [_ _] <br>
·· {:query [:person/id :person/fname :person/email <br>
··········  {:person/address (comp/get-query Address)}] <br>
··  ..} ..) <br>
Note: Address componentinin ihtiyacını `comp/get-query` ile içerir"
clj00036	Query composition and data `flow	"/Users/mertnuhoglu/gdrive/keynote_resimler/screencapture/scs20210828_081728.jpg` <br>
Root komponenti tüm alt komponentlerden query'leri toplar <br>
Bunları birleştirip client db'ye gönderir <br>
Client db tree of data döner <br>
Root bunları kendi çocuklarına dağıtır (propagates down)"
clj00037	Query vs query fragment	"defsc'lerin sorguları bağımsız birer sorgu değil, birer sorgu parçası. <br>
Ancak üst sorgu bağlamı içinde bir anlam ifade eder <br>
Örn: `[:person/id :person/fname]` <br>
Bu sorgu parçası hangi person olduğunu belirtmez. Bu bilgi üst sorgudan gelir: <br>
Örn: [{:all-people [&lt;insert here&gt;]}] (in an imaginary AllPeopleList component)"
clj00038	Ident tanımlama yolları:	"(defsc Person <br>
·· [_ props] <br>
·· {.. <br>
··  ;; There are three ways to specify an ident, here all are equal: <br>
··  :ident (fn [] [:person/id (:person/id props)])} ..) ; lambda form <br>
··  ;; = the template form: [:person/id :person/id] <br>
··  ;; = the keyword  form: :person/id"
clj00039	Parts of an Ident for a data entity:	"template form <br>
2-element vector: `[:person/id 123]` <br>
name of ID property <br>
its value"
clj00040	Ident for a component:	"lambda form <br>
`(fn [] [:person/id (:person/id props)])` <br>
a function that returns the ident of the associated data entity"
clj00041	Ident for a singleton component:	"`:ident (fn [] [:component/id :AllPeopleList])` <br>
property name: `component/id` <br>
hardcoded value: usually its name as keyword"
clj00042	Why do we need component idents?	To tell Fulcro what is the ID property of an entity so that it can normalize its data into the client database. <br>
clj00043	shorthand for lambda form	":ident :address/id <br>
;; shorthand for <br>
:ident (fn [:address/id (:address/id props)]) <br>
:initial-state ne işe yarar? <br>
ilk render (first frame) sırasında yüklenecek propları tanımlar <br>
:initial-state (fn [params] &lt;data&gt;)"
clj00044	parts of a component's body:	"1. HTML classes and element ID <br>
2. map of HTML tag's attributes <br>
3. children <br>
(dom/&lt;tag&gt; ; or &lt;ns&gt;/&lt;Fulcro component factory name&gt; for components <br>
·· &lt;[optional] keyword encoding classes and an element ID&gt; ;  <br>
·· &lt;[optional] map of the tag's attributes (or React props)&gt; ;  <br>
·· &lt;[optional] children&gt;) ; "
clj00045	ex: component body:	"(dom/h2 :.ui.message#about <br>
·· {:style {:background ""1px solid black""} <br>
··  :classes [""my-heading"" (when (:important? props) ""important"")]} <br>
·· ""About"")"
clj00046	returning multiple elements	"wrap them in a sequence or comp/fragment <br>
React requires them to have a unique `:key` <br>
ex: `(defsc X [_ _] [(dom/p {:key ""a""} ""a"") (dom/p {:key ""b""} ""b"")])`"
clj00047	assigning a unique `:key` to every instance of a fulcro component. ör: bir map dönüyorsun, bunun her bir öğesine nasıl tekil `:key` atarsın?	"ör: `(map ui-employee (:department/employees props))` <br>
comp/factory'nin ikinci argümanı bir fonksiyon alır ve bu tekil `:key` döner: <br>
(def ui-employee (comp/factory Employee {:keyfn :employee/id})) <br>
;; assuming the Employee component has the (unique) :employee/id prop"
clj00048	bir komponent ne için mutasyon kullanır?	"kendi dışında bir şeyi değiştirmek için <br>
ör: upload file, change data in client DB, change data on server-side <br>
comp/transact! ile"
clj00049	mutation yapan transact! fonksiyonu ne bekler?	"sequence of data <br>
(comp/transact! app-or-component <br>
·· [(&lt;fully qualified symbol&gt; &lt;params map&gt;), ...])"
clj00050	local and remote mutation örneği:	"#?(:cljs <br>
···· ;; client-side <br>
···· (m/defmutation delete-employee [{id :employee/id :as params}] ;  <br>
······ (action [{:keys [app state] :as env}]          ;  <br>
········ (swap! state update :employee/id dissoc id)) <br>
······ (remote [env] true)                            ;  <br>
······ (ok-action [{:keys [app state result]}]        ;  <br>
········ (println ""It worked!""))) <br>
·· :clj <br>
···· ;; server-side <br>
···· (pc/defmutation delete-employee [env {id :employee/id :as params}]) ;  <br>
······ {::pc/params #{:employee/id}} <br>
······ (db/delete-employee id) <br>
······ nil)) <br>
;; Somewhere in a component: <br>
(comp/transact! this [(delete-employee {:employee/id id})])   ;  <br>
;; or: <br>
(comp/transact! this `[(delete-employee {:employee/id ~id})]) ; "
clj00051	load! iki şey yapar:	"serverdan data tree çeker <br>
bu veriyi normalleştirip client DB ile birleştirir (merge)"
clj00052	merge-component! örneği:	"(merge/merge-component! <br>
·· app <br>
·· Person <br>
·· person-tree) <br>
person-tree'deki nested datayı normalize eder ve şu client DB'yi üretir: <br>
·· {:person/id  {1  {:person/id 1   :person/fname ""Jo"" :person/address [:address/id 11]}} <br>
··  :address/id {11 {:address/id 11 :address/street ""Elm Street 7""}}} <br>
nested data tree: <br>
·· (def person-tree <br>
···· {:person/id 1 <br>
····  :person/fname ""Jo""
····  :person/address {:address/id 11 <br>
·················· 		:address/street ""Elm Street 7""}}) <br>
stateful componentler: <br>
·· (defsc Address [_ _] <br>
···· {:query [:address/id :address/street] <br>
····  :ident :address/id}) <br>
····  ;; reminder: `:address/id` is a shorthand for <br>
····  ;; (fn [:address/id (:address/id props)]) <br>
·· (defsc Person [_ _] <br>
···· {:query [:person/id :person/fname <br>
············  {:person/address (comp/get-query Address)}] <br>
····  :ident :person/id})"
clj00053	when to load! ?	"Kendin serverdan veriyi yüklemelisin, fulcro senin için yüklemez. <br>
Şu zamanlarda yükleyebilirsin: <br>
1. app başlarken <br>
2. event handler içinde (onClick) <br>
3. component mount edildiğinde <br>
4. component gösterileceği vakit (deferred routing)"
clj00054	Client DB Naming Conventions (fulcro)	"UI components         <br>
·· :ui/name <br>
Tables                <br>
·· :person/id ~ :entity-type/index-name <br>
Root properties       <br>
·· :root/prop-name <br>
Node properties       <br>
·· :entity-type/prop-name ex: :person/name <br>
Singleton components  <br>
·· ::Component <br>
"
clj00055	mkdir and npm (fulcro)	"mkdir        <br>
·· mkdir -p src/main src/dev resources/public <br>
npm install  <br>
·· npm install shadow-cljs react react-dom --save <br>
"
clj00056	deps.edn (fulcro)	":paths                     <br>
·· :paths   [""src/main"" ""resources""] <br>
:deps                      <br>
·· :deps {org.clojure/clojure ... com.fulcrologic/fulcro ...} <br>
:aliases :dev              <br>
·· {:extra-paths .. :extra-deps ..} <br>
:aliases :dev :extra-deps  <br>
·· {org.clojure/clojurescript .. thheller/shadow-cljs .. binaryage/devtools ..} <br>
"
clj00057	shadow-cljs.edn (fulcro)	":deps          <br>
·· {:aliases [:dev]} <br>
:builds :main  <br>
·· {:target .. :output-dir .. :asset-path .. :modules .. :devtools .. } <br>
"
clj00058	HTML File (fulcro)	"&lt;div id=""app"".. <br>
&lt;script src=""/js/main/main.js"".."
clj00059	Application Sources (fulcro)	"app path             <br>
·· src/main/app/client.cljs <br>
app top level forms  <br>
·· (defonce app ..) (defsc Root ..) (defn init ..) (defn refresh ..) <br>
"
clj00060	Build and run fulcro app (fulcro)	npx shadow-cljs server <br>
clj00061	Using the REPL (fulcro)	":nrepl {:port 9000} ; shadow-cljs.edn <br>
(shadow/repl :main) ; cursive <br>
"
clj00062	render method (fulcro)	"body of defsc = render method of React component <br>
(dom/div {:id ""id"" :className ""x y z"" :style {:color ""red""}} ...) <br>
(dom/div :.x.y.z#id {:style {:color ""red""}} ...)"
clj00063	element factory (fulcro)	"ex: <br>
(def ui-person (comp/factory Person))"
clj00064	ex: Person with name, age properties. component witout metadata and element factory  (fulcro)	"(defsc Person [this {:person/keys [name age]}] <br>
·· (dom/div <br>
···· (dom/p ""Name: "" name) <br>
···· (dom/p ""Age: "" age))) <br>
(def ui-person (comp/factory Person)) <br>
(defsc Root [this props] <br>
·· (dom/div <br>
···· (ui-person {:person/name ""Joe"" :person/age 22})))"
clj00065	Root. data: friends -&gt; list/label list/people -&gt; person/name person/age (fulcro)	"(defsc Root [this {:keys [ui/react-key]}] <br>
·· (let [ui-data {:friends {:list/label ""Friends"" :list/people <br>
·················· 										 [{:person/name ""Sally"" :person/age 32} <br>
·················· 											{:person/name ""Joe"" :person/age 22}]} <br>
················  :enemies {:list/label ""Enemies"" :list/people <br>
·················· 										 [{:person/name ""Fred"" :person/age 11} <br>
·················· 											{:person/name ""Bobby"" :person/age 55}]}}] <br>
···· (dom/div <br>
······ (ui-person-list (:friends ui-data)) <br>
······ (ui-person-list (:enemies ui-data))))) <br>
(def ui-person-list (comp/factory PersonList)) <br>
(defsc PersonList [this {:list/keys [label people]}] <br>
·· (dom/div <br>
···· (dom/h4 label) <br>
···· (dom/ul <br>
······ (map ui-person people))))"
clj00066	UI graph: (fulcro)	"Root <br>
·· List <br>
···· Person <br>
···· Person <br>
·· List <br>
···· Person <br>
···· Person"
clj00067	and the data graph matches the same structure, with map keys acting as the graph "edges": (fulcro)	"edge = key ve value = node demek istiyor. <br>
{ :friends           { :list/people [PERSON ...] <br>
;  ==to-one list=>      ==to-many people==> <br>
·· :enemies           { :list/people [PERSON ...] }"
clj00068	benefits of initial state: (fulcro)	"1. feeds the initial UI with data <br>
2. it becomes your initial app database <br>
3. it supports local reasoning"
clj00069	pull initial tree at REPL (fulcro)	"dev:cljs.user=&gt; (com.fulcrologic.fulcro.components/get-initial-state app.ui/Root {}) <br>
{:friends {:list/label ""Friends"", <br>
··········  :list/people [{:person/name ""Sally"", :person/age 32} {:person/name ""Joe"", :person/age 22}]}, <br>
:enemies {:list/label ""Enemies"", <br>
··········  :list/people [{:person/name ""Fred"", :person/age 11} {:person/name ""Bobby"", :person/age 55}]}}"
clj00070	see current app state at REPL (fulcro)	(com.fulcrologic.fulcro.application/current-state app.client/app) <br>
clj00071	how to read this query:  (fulcro)	"[{:friends  ; JOIN <br>
···· [ :list/label <br>
······ {:list/people ; JOIN <br>
········  [:person/name :person/age]}]}] <br>
reads: At the root you’ll find :friends, which joins to a nested entity that has a label and people. People, in turn, is a join that has nested properties name and age. <br>
·· vector = ""get this stuff at the current node"". node is relative (to current node) <br>
·· `:friends` is root of application state. its value is nested state (maps mean joins on trees) <br>
·· value of `:friends` is a subquery. thus it is a vector."
clj00072	join multiplicity: (fulcro)	"`to-one` if singular <br>
`to-many` if vector"
clj00073	try queries in REPL (fulcro)	"(require '[com.fulcrologic.fulcro.algorithms.denormalize :as fdn])  <br>
(require '[com.fulcrologic.fulcro.components :as comp]) <br>
(fdn/db-&gt;tree [{:friends [:list/label]}] (comp/get-initial-state app.ui/Root {}) {}) <br>
; {:friends {:list/label ""Friends""}} <br>
(com.fulcrologic.fulcro.components/get-query app.ui/Root {})"
rprog00074	[How do I group my date variable into month/year in R? - Stack Overflow&#093;(https://stackoverflow.com/questions/33221425/how-do-i-group-my-date-variable-into-month-year-in-r) (R)	"expenses %&gt;% `group_by(month=lubridate::floor_date(date,` ""month"")) %&gt;% <br>
··  summarize(amount=sum(amount)) <br>
·· ##>    month      amount <br>
·· ##>    <date>      <dbl> <br>
·· ##>  1 2016-01-01  1305. <br>
·· ##>  2 2016-02-01  1168."
rprog00075	ex: import excel file 2nd sheet, select one column, convert it to lowercase (R)	"vars01 = rio::import(""inpot.xlsx"", which = 2) %&gt;% <br>
·· select(field_name) %&gt;% <br>
·· mutate(field_name = tolower(field_name))  <br>
"
rprog00076	ex: `dplyr::bind_rows` `(R)	"bind_rows(data.frame(x` = 1:3), data.frame(y = 1:4)) <br>
·· ##>    x  y <br>
·· ##> 1  1 NA <br>
·· ##> 2  2 NA <br>
·· ##> 3  3 NA <br>
·· ##> 4 NA  1 <br>
·· ##> 5 NA  2 <br>
·· ##> 6 NA  3 <br>
·· ##> 7 NA  4"
rprog00077	get number of rows in dataframe `(R)	nrow(vars_df)` <br>
rprog00078	get number of elements in a list or vector (R)	length(lst) <br>
rprog00079	Specify names of selected fields with a vector (R)	"d02 = d01 %&gt;% <br>
·· select_(.dots = vars_f) <br>
write_csv(d02, path = ""file.csv"", na = """")"
rprog00080	Import data into database using R (R)	dbWriteTable(con, c("client", `"altdg_sample"),` d0, row.names=F) <br>
rprog00081	Load data from database into R (R)	d10 = tbl(con, sql("SELECT * FROM `data_20181001.public_all_data"))` %&gt;% collect <br>
rprog00082	Run a SQL query. native R (R)	"dbGetQuery(con, statement = paste0(""
·· insert into "", data_schema, "".master_variables <br>
·· select * from "", data_schema, "".master_variables_forecast <br>
·· where source = 'ez' <br>
""))"
rprog00083	Run a SQL query. dplyr (R)	"d0 = tbl(con, sql(""
·· SELECT company_ein <br>
·· FROM data_20181202.master_variables <br>
·· WHERE extract(YEAR from plan_year_end_date) = 2014 and source = 'ez' <br>
·· "")) %&gt;% collect <br>
nrow(d0)"
rprog00084	Compare `company_ein` field between two dfs. Which ones are different? (R)	"d2 = `setdiff(d0$company_ein,` `d1$company_ein)` <br>
length(d2)"
rprog00085	df. filter rows after and before some date. (R)	"c03 = c02 %&gt;% <br>
·· filter(filing_date &gt;= as.Date('2017-1-1')) %&gt;% <br>
·· filter(filing_date &lt; as.Date('2018-1-1')) "
clj00086	"Step 3 — Receive the Data Feed as Props in Root <br>
············  ref: /Users/mertnuhoglu/projects/study/clj/ex/study_fulcro/app07/src/app/ui.cljs <br>
············  (defsc Root [this {:keys [friends enemies]}] <br>
··················       {:query         [{:friends (comp/get-query PersonList)} <br>
··················                                                                        {:enemies (comp/get-query PersonList)}] <br>
<br>
How to get query for Root?"	"(com.fulcrologic.fulcro.components/get-query app.ui/Root {}) <br>
<br>
[{:friends [:list/label {:list/people [:person/name :person/age]}]} <br>
 {:enemies [:list/label {:list/people [:person/name :person/age]}]}]"
clj00087	Map vs ilişkisel veritabanı: to-many arity referanslardaki fark nedir? (fulcro)	bir mapte (veya graph databasede), referans to-many arity'ye sahip olabilir, ilişkisel veritabanlarından farklı olarak <br>
clj00088	Şu şekilde referans vermenin kusuru nedir: { ... people #{1, 2} } (fulcro)	"Buradaki sorun: `:people` <br>
·· 1 ve 2 id'lerini hangi tablodan bakacağımızı yukarıdaki speklerde göremiyoruz <br>
·· Hem tablo ismine, hem de id'ye ihtiyacımız var: `[:Person 1]` gibi <br>
·· [TABLE ID] vektörüne `ident` denir <br>
<br>
:list/people [[:person/id 1] [:person/id 2]] }}"
clj00089	comp/transact! özellikleri: (fulcro)	"treat operation like data <br>
use unquote to embed data from local variables <br>
"
clj00090	Mutasyon şu şekilde olsaydı ne kusurları olurdu: (comp/transact! this [(api/delete-person {:list-name label :name name})]) (fulcro)	"UI refactor ederken, mutationları da düzeltmemiz gerekiyor çünkü veri ağacının şekli değişiyor <br>
veri üzerine yerel düşünemiyoruz. mutasyonlar global anlayış gerektiriyor <br>
mutasyonlar giderek büyüyüp çirkin hale geliyor <br>
bir fact birden çok yerde bulunuyorsa, hepsi için doğru sırada güncelleme yapmak gerekiyor. data duplikasyon meselesi."
clj00091	Mutasyonlarda global veri modelini bilme gereğini kaldırmak için ne gerekir? (fulcro)	Veritabanı normalizasyonu <br>
clj00092	state çekme fonksiyonu: (fulcro)	(com.fulcrologic.fulcro.application/current-state app.application/app) <br>
clj00093	bir ui komponentin query'sini çekme fonksiyonu: (fulcro)	(com.fulcrologic.fulcro.components/get-query app.ui/Root) <br>
clj00094	mevcut state'i ve query'yi kullanarak, veri ağacını çekme fonksiyonu: (fulcro)	"(com.fulcrologic.fulcro.algorithms.denormalize/db-&gt;tree query state state) <br>
<br>
{:friends {:list/id :friends, <br>
··········  :list/label ""Friends"", <br>
··········  :list/people [{:person/id 1, :person/name ""Sally"", :person/age 32} <br>
·················· 			 {:person/id 2, :person/name ""Joe"", :person/age 22}]}, <br>
:enemies {:list/id :enemies, <br>
··········  :list/label ""Enemies"", <br>
··········  :list/people [{:person/id 3, :person/name ""Fred"", :person/age 11} <br>
·················· 			 {:person/id 4, :person/name ""Bobby"", :person/age 55}]}}"
clj00095	ex resolver: id -> (id, name)  (fulcro)	"(pc/defresolver person-resolver [env input] <br>
·· {::pc/input  #{:person/id} <br>
··  ::pc/output [:person/name]} <br>
·· (let [name (get-name-from-database (:person/id input))] <br>
···· {:person/name name}))"
clj00096	ex: id -&gt; (id, people). [List|id] - [Person|name] (fulcro)	"(app.parser/api-parser [{[:list/id :friends] [:list/id {:list/people [:person/name]}]}]) <br>
<br>
=&gt; {[:list/id :friends] {:list/id :friends, :list/people [{:person/name ""Sally""} {:person/name ""Joe""}]}}"
clj00097	Om Next Ideas: (fulcro)	"UI Component co-located identity/query <br>
Auto-normalize client-side database <br>
Reify mutations"
clj00098	We were missing a real database in frontend side (fulcro)	"Most of logic is on the front-end <br>
Why is your data stored as an ad-hoc mess?"
clj00099	How much database needed in front-end? (fulcro)	"Data normalization <br>
Query engine <br>
Queue updates <br>
Indexing (nice to have)"
clj00100	Reified Mutations instead of events: (fulcro)	"They are lists and look like function invocations <br>
<br>
`(delete-item {:item/id 1}) <br>
<br>
Can be grouped into transactions: <br>
<br>
`[(f) (g)] <br>
<br>
Abstract representation of an operation: <br>
·· Delete in client db (optimistically) <br>
·· Delete in server db <br>
Record, replay, audit <br>
<br>
"
clj00101	ex: reified mutations. delete-item (fulcro)	"usage: <br>
<br>
·· (let [handler #(transact! this `[(delete-item {:item/id ~id})])] <br>
···· (div {:onClick handler} ""Delete"")) <br>
<br>
definition: <br>
<br>
·· (defmutation delete-item <br>
···· [{:keys [item/id]}] <br>
···· (action [{:keys [state]}] <br>
······ (swap! state dissoc :item/id id)) <br>
···· (remote [_] :http-api)) <br>
<br>
server: <br>
<br>
·· (defmutation delete-item <br>
···· [{:keys [item/id]}] <br>
···· (action [{:keys [conn]}] <br>
······ @(d/transact conn [[:db.fn/retractEntity id]])))"
clj00102	Fulcro summary: (fulcro)	"state* = f(state)                          ; mutation/load <br>
props = QueryEngine(UI-components, state*) ; query <br>
view = ui(props)                           ; react <br>
"
clj00103	Fulcro benefits (fulcro)	"data pools problem <br>
decouples ui from behavior <br>
clear caching story"
clj00104	Data model benefits (fulcro)	"Where's the data for Y? <br>
·· Always in client db <br>
·· One level deep only (shallow) keyed by identity <br>
·· Identity is colocated with ui code <br>
Updating deep denormalized tables is difficult. But shallow tables easy <br>
Easily implement rollback <br>
Optimistic update code colocated with full-stack logic"
clj00105	Common benefits (fulcro)	"Network plumbing is ready <br>
·· websocket, xhr <br>
·· Full transactional semantics <br>
·· Progress indicators <br>
·· Cancel pending requests <br>
·· Sequential request queue <br>
Pathom: wraps any data source <br>
Read/writes API well defined <br>
All responses from API are normalized automatically"
clj00106	Optimization benefits (fulcro)	"Caching in client is part of design <br>
Query engine is very fast <br>
Read/write can be combined into single request"
clj00107	Fulcro inspect: dev tooling (fulcro)	"Client db inspection <br>
UI Element inspection <br>
Network tab: requests in IO <br>
Query builder for EQL queries"
clj00108	Demand Driven Architecture Principles (fulcro)	"Clients must be able to specify what they need (which) and in which shape (what) <br>
Composition: The request must support recursion <br>
Interpretation: Queries must be interpreted in server"
clj00109	Pathom resolvers (fulcro)	"Represent edges on the graph <br>
Resolvers are maps <br>
Enable contextual auto-complete inference <br>
"
clj00110	Execution of EQL (fulcro)	"ex: query: <br>
<br>
·· [{[:customer/id 2] <br>
····  [:customer/name <br>
······  :customer/dob <br>
······  {:customer/orders <br>
········  [[:order/ordered-at <br>
··········  :order/open?]}]}] <br>
<br>
resolvers: <br>
<br>
·· (pc/defresolver customer-by-id [_ {:keys [customer/id]}] <br>
····  {::pc/input   #{:customer/id} <br>
······  ::pc/output  [:customer/id <br>
··················          :customer/name <br>
··················          :customer/dob]} <br>
····  (db/find-customer-by-id id)) <br>
<br>
execution <br>
<br>
·· 1. adım: [:customer/id 2] <br>
····  sets context <br>
····  Bu aşamada henüz resolver belli değil, resolvera gönderilecek arg belli <br>
·· 2. adım: :customer/name <br>
····  Şimdi bu çıktıyı resolverlar içinde ararız. <br>
····  Hangi resolver çıktısında varsa, bu resolvera contextteki argları göndeririz"
clj00111	Flattening (fulcro)	"Tüm to-one ilişkiler düzleştirilebilir <br>
<br>
resolvers: <br>
<br>
·· (pc/defresolver customer-by-id [_ {:keys [customer/id]}] <br>
····  {::pc/input   #{:customer/id} <br>
······  ::pc/output  [:customer/id <br>
··················          :customer/name <br>
··················          :customer/dob]} <br>
····  (db/find-customer-by-id id)) <br>
<br>
·· (pc/defresolver customer-orders [_ {:keys [customer/id]}] <br>
····  {::pc/input   #{:customer/id} <br>
······  ::pc/output  [{:customer/orders <br>
··················           [:order/id <br>
··················            :customer/id   ;; to-one relationship <br>
··················            :order/ordered-at <br>
··················            :order/open?]}]} <br>
····  {:customer/orders (db/find-customer-orders id)}) <br>
<br>
query: <br>
<br>
·· [{[:customer/id 2] <br>
····  [{:customer/orders <br>
········  [:order/ordered-at <br>
··········  :order/open? <br>
··········  :customer/name]}]}] ;; xxx"
