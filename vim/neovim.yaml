---
Topics:
  Debugging in Neovim: [info, nvim-dap debugger g12667]
  Otomatik reload:
    ttl: bir plugin kodunu deÄŸiÅŸtirip tekrar Ã§alÄ±ÅŸtÄ±rmak iÃ§in hÄ±zlÄ± otomatik reload yapmakta fayda var
    a01: 
      video:- Writing NeoVim Plugins - YouTube g12641: [info, video:- Writing NeoVim Plugins - YouTube g12641]
    a02:
      ttl: eÄŸer plugini varsayÄ±lan yerinden dÄ±ÅŸarÄ± alÄ±p taÅŸÄ±yamÄ±yorsan
      kd:
        :lua for k in pairs(package.loaded) do if k:match("telescope") then package.loaded[k] = nil end end
        :so %
plugin development:
  points:
    :messages komutu: komut satÄ±rÄ± mesajlarÄ±nÄ± listeler debug iÃ§in
  video:- Neovim Lua Buffer API | Neovim ðŸ’™ðŸ’š Lua g12639:
    ref: https://www.youtube.com/watch?v=K9F5Z8QBFt4
    notes: >
      nvim_buf_...()
      nvim_list_bufs()
      api-buffer
    ex01: 
      ref: ~/projects/study/vim/ex/neovim/ex/e01.lua
      dsc: >
        alert(): print gibi
    ex02:
      ref: ~/projects/study/vim/ex/neovim/ex/e02.lua
      dsc: >
        nvim_buf_get_lines(): belli satÄ±rlarÄ± Ã§eker
        nvim_buf_get_mark(0, "t"): t mark pozisyonunu Ã§eker
  video:- Writing NeoVim Plugins - YouTube g12641:
    ref: 
      https://www.youtube.com/watch?v=9L4sW047oow
      ~/projects/study/vim/ex/neovim/plugin-01/plugin/plugin-01.vim
      ~/projects/study/vim/ex/neovim/plugin-01/lua/plugin-01/init.lua
    notes: >
      current working directory:
        ~/projects/study/vim/ex/neovim/plugin-01
      start neovim:
        nvim --cmd "set rtp+=$(pwd)" .
      now you can run: >
        :source %
        :call Plugin01()
      otomatik reload:
        ÅŸimdi init.lua'da deÄŸiÅŸiklik yapÄ±p Plugin01() fonksiyonunu Ã§aÄŸÄ±rdÄ±ÄŸÄ±nda otomatik deÄŸiÅŸiklikler yÃ¼klenir
      vim fonksiyonlarÄ±nÄ± hatÄ±rlama:
        nvim_ ile baÅŸlayanlar
        nvim_win_ ile baÅŸlayanlar
        vim.api.nvim_... ÅŸeklinde Ã§aÄŸrÄ±lÄ±r
Plugins:
  structlog.nvim g12645:
    ex01:
      ref: ~/projects/study/vim/ex/neovim/logging/e01.lua
    ex02:
      ttl: hem consoleda, hem alert olarak, hem dosyaya loglama
      ref: ~/projects/study/vim/ex/neovim/logging/e02.lua
      log dosyasÄ±: ~/projects/study/vim/ex/neovim/logging/test.log
    ex03:
      ttl: kendi ihtiyacÄ±ma gÃ¶re konfigÃ¼re etme
      ref: 
        configuration: ~/projects/private_dotfiles/.config/nvim/lua/mert/logger.lua
        usage: ~/projects/study/vim/ex/neovim/logging/e03.lua
      usage: >
        local logger = require("mert/logger").logger
        logger:info("A log message2")
  telescope.nvim g12653:
    ref: ~/projects/study/vim/telescope.yaml
  nvim-dap debugger g12667:
    ref: >
      debug_map <url:file:///~/projects/private_dotfiles/.config/nvim/lua/mert/which-key.lua#r=g12666>
      nvim-dap shortcuts <url:file:///~/projects/private_dotfiles/.config/nvim/lua/mert/debug.lua#r=g12663>
      [quickstart](https://github.com/jbyuki/one-small-step-for-vimkind/blob/main/doc/osv.txt)
      ~/projects/study/code/ex/lua/ex/e02.lua
    01:- start DAP server in neovim A (yedek):
      lua require"osv".launch({port = 8088})
      SPC d a
    02:- start neovim B (asÄ±l):
      01: open lua file
      02:- place a breakpoint:
        :lua require"dap".toggle_breakpoint()
        SPC d b
      03:- connect DAP client:
        :lua require"dap".continue()
        SPC d c
        enter host+port
    03:- run lua file in neovim A:
      a01:- dÃ¼z lua scripti ise:
        :luafile e02.lua
      a02:- neovim plugin ise: >
        :source e02.lua
        :call Function()
      state: neovim B freezes on breakpoint
    04: neovim B attaches to lua server in A
    05:- terminate neovim B:
      :lua require"dap".terminate()
      SPC d q
    06: repeat step 01 in A
    07:- repeat step 02 in B:
      choose: Terminate
    08: repeat step 02 in B
    09: repeat 03 in A
Neovim:
  video:- Neovim 0.6:- What's new? - YouTube:
    ref: https://www.youtube.com/watch?v=jzYgaGMAGDw
    ftr: >
      ^L: clear search highlight
      LSP server: returns json
      virtual line support
    notes: >
      excalidraw.com

